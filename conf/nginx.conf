user www www;
pid /var/run/nginx.pid;
worker_processes auto;
worker_cpu_affinity auto;
worker_rlimit_nofile 102400;

events {
    use epoll;
    worker_connections 102400;
}

http {
    include ./mime.types; 
    client_max_body_size 10m;    #允许客户端请求的最大单文件字节数
    client_body_buffer_size 10m;  #缓冲区代理缓冲用户端请求的最大字节数

    sendfile on;
    keepalive_timeout  65;
    charset utf8;

    gzip on;
    gzip_proxied any;
    #gzip_static on;
    gzip_http_version 1.0;
    gzip_disable "MSIE [1-6]\.";
    gzip_vary on;
    gzip_comp_level 6;
    gzip_types text/plain text/css  text/xml text/javascript application/javascript
        application/x-javascript application/json application/xml application/xml+rss
        application/xhtml+xml  application/x-font-ttf  application/x-font-opentype image/svg+xml image/x-icon;
    gzip_buffers 16 8k;
    gzip_min_length 1k;

    lua_package_path "/data/web/openresty-china/?.lua;;";
    #lua_package_cpath "./app/library/?.so;/usr/local/lor/?.so;;";
    lua_code_cache on; # set on @production
    #LUA_SHARED_DICT


    lua_socket_log_errors off; 
    lua_check_client_abort on;
    lua_shared_dict ngx_data 64m;
    


    init_worker_by_lua_block {
        local string_split = function(str, delimiter)
            if str==nil or str=='' or delimiter==nil then
                return nil
            end
            
            local result = {}
            for match in (str..delimiter):gmatch("(.-)"..delimiter) do
                table.insert(result, match)
            end
            return result
        end

        local ngx_data = ngx.shared.ngx_data
        local worker_id = ngx.worker.id() 
        if worker_id == 0 then 
            ngx.timer.every(1, function(premature, ngx_data)
                if premature then
                    return
                end 
                
                local val, err = ngx_data:rpop('task') 
                if val then
                    local arr = string_split(val, '##@##')
                    if arr[1] and arr[2] then 
                        
                        local m, err = ngx_data:get(arr[1])
                         --ngx.log(ngx.ERR,  "--当前正在执行的->>>> : " , arr[1] , m )
                        if not m then
                            --ngx.log(ngx.ERR, "--出队列->>>>: ", arr[1] or "" ,"<=====>", arr[2] or "") 
                            ngx_data:set(arr[1], arr[2]) --没有任务在执行时 写入新任务
                        else
                            --ngx.log(ngx.ERR, "--当前有正在执行的任务回到 队列->>>>: ", arr[1] or "" ,"<=====>", arr[2] or "") 
                            ngx_data:lpush('task',  val) --否则写入队列继续执行
                        end
                    end
               end
               --ngx.log(ngx.ERR, "-timer-->>>>: ")
            end, ngx_data)
        end
    }

    access_log  /data/log/nginx_access.log combined buffer=16k;
    error_log /data/log/nginx_error_openresty_china.log;




    server {
        listen 18080;
        server_name -;
        set $template_root  /data/web/openresty-china/app/views/;

        # 用户上传的静态文件目录
        set $static_files_path /data/web/openresty-china/app/static;
       
        # 头像和文章、评论图片
        location /static {
            alias "/data/web/openresty-china/app/static";
        }
         
        location = /favicon.ico {
            log_not_found off;
            access_log off;
        } 
        
        location / {
            content_by_lua_file /data/web/openresty-china/app/main.lua;
        }
       
        location /test {
           alias "/data/web/openresty-china/app/test/";
        } 
        
        location = /api/push { 
            content_by_lua_block {
                -- 无脑接收新任务 然后由定时器自动刷给指定共享内存
                local ngx_data = ngx.shared.ngx_data
                ngx.req.read_body()
                local _POST, err = ngx.req.get_post_args()

                local args = ngx.req.get_uri_args();
                local account =  _POST['account'] or ""
                local body =  _POST['body'] or ""
                ngx.log(ngx.ERR, "--写入队列-task->>>>: " , "foo" .. account .. "##@##" ..  body)
                ngx_data:lpush('task' ,  "foo" .. account .. "##@##" ..  body )
            }
        } 

        location = /api/set {
            content_by_lua_block {
                local ngx_data = ngx.shared.ngx_data
                ngx.req.read_body()
                local _POST, err = ngx.req.get_post_args()

                local args = ngx.req.get_uri_args();
                local account = (args['account'] ~= nil) and args['account'] or "123456"
                local body = _POST['body'] or ""
                ngx_data:set("foo" .. account or "" , body, 300) 
                
                ngx.log(ngx.ERR, "--直接写入-set->>>>: " , "foo" .. account .. "  val:" .. body)
                ngx.say('{"success":true,"data":{}}')
            }
        }

        location = /api/get {
            content_by_lua_block {
                local ngx_data = ngx.shared.ngx_data
                local args = ngx.req.get_uri_args();
                local account = (args['account'] ~= nil) and args['account'] or "123456"
                local body,err = ngx_data:get("foo" .. account)

                --ngx.log(ngx.ERR, "---get->>>>: ", "foo" .. account)

                if body then
                    ngx.say('{"success":true,"data":' .. body .. '}')
                else
                    ngx.say('{"success":false,"data":{}}')
                end
            }
        }

        location = /api/del {
            content_by_lua_block {
                local ngx_data = ngx.shared.ngx_data
                local args = ngx.req.get_uri_args();
                local account = (args['account'] ~= nil) and args['account'] or "123456"
                local id = (args['id'] ~= nil) and args['id'] or "123456"
                local key = "foo" .. account

                local iskey =  ngx_data:get(key)
 
                ngx_data:delete(key) 
                ngx_data:set(key, ngx.null)
                -- ngx_data:lpush('task' ,  "foo" .. account .. "##@##{id:" .. id .. ",url:'#',typ:11011,body:0}" )
                ngx.log(ngx.ERR, "--直接删除-delete->>>>: " , key)
                
                local cjson = require "cjson"
                local num = ngx_data:llen("task")
                ngx.say('{"success":true,"data": ' .. num ..  ' }')
            }
        }



        location = /api/settoken {
            content_by_lua_block {
                local ngx_data = ngx.shared.ngx_data
                ngx.req.read_body()
                local _POST, err = ngx.req.get_post_args()

                if not _POST['account'] or  not _POST['body'] then
                    ngx.say('{"success":false,"data":{}}')
                else
                    local account =  _POST['account'] or "123456" 
                    local body =  _POST['body'] or "123456" 
                    ngx_data:set(account, body)
                    ngx.say('{"success":true,"data":{}}')
                end
            }
        }

        location = /api/gettoken {
            content_by_lua_block {
                local ngx_data = ngx.shared.ngx_data
                local args = ngx.req.get_uri_args();
                local account = (args['account'] ~= nil) and args['account'] or "123456"
                local body, err = ngx_data:get(account or "")
                if body then
                    ngx.say('{"success":true,"data":"' .. body .. '"}')
                else
                    ngx.say('{"success":false,"data":{}}')
                end
            }
        }
    }


}
